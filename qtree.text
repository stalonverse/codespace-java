// #include <iostream>
// #include <queue>
// #include <map>
// #include <string>
// #include <memory>
// #include <fstream>
// #include <vector>
// #include <tuple>
// #include <sstream>
// using namespace std;
// // Node
// // Abstract base class for tree nodes
// class Node
// {
// public:
//  virtual float freq() const = 0;
//  virtual string symbol() const = 0;
//  virtual ~Node() = default;
//  virtual void setBitTrail(string &bitString) = 0;
//  virtual string bitString() const = 0;
// };
// // smart pointer
// using NodePtr = shared_ptr<Node>;
// // Branch Node
// // Node representing a branch with two child nodes
// class Branch : public Node
// {
// private:
//  NodePtr _Left;
//  NodePtr _Right;
//  string _BitString;
// public:
//  Branch(const NodePtr &left, const NodePtr &right) : _Left(left), _Right(right)
// {}
//  // Calculate and return the frequency of the branch node
//  float freq() const override
//  {
//  return _Left->freq() + _Right->freq();
//  }
//  // Return the concatenated symbol representation of the left and right child nodes
//  string symbol() const override
//  {
//  return _Left->symbol() + _Right->symbol();
//  }
//  // Accessors for the left and right child nodes
//  NodePtr left() const
//  {
//  return _Left;
//  }
//  NodePtr right() const
//  {
//  return _Right;
//  }
//  void setBitTrail(string &bitString) override
//  {
//  _BitString = bitString;
//  }
//  string bitString() const
//  {
//  return _BitString;
//  }
// };
// // Leaf Node
// // Node representing a leaf with a symbol and frequency
// class Leaf : public Node
// {
// private:
//  float _Freq;
//  string _Symbol;
//  string _BitString;
// public:
//  Leaf(const string &symbol, float freq) : _Symbol(symbol), _Freq(freq) {}
//  // Return the frequency of the leaf node
//  float freq() const override
//  {
//  return _Freq;
//  }
//  // Return the symbol of the leaf node
//  string symbol() const override
//  {
//  return _Symbol;
//  }
//  void setBitTrail(string &bitString) override
//  {
//  _BitString = bitString;
//  }
//  string bitString() const override
//  {
//  return _BitString;
//  }
// };
// // Build a priority queue tree from character frequencies
// NodePtr buildQueueTree(std::vector<std::tuple<char, int, string>> &charFreq)
// {
//  auto cmp = [](const NodePtr &a, const NodePtr &b)
//  { return a->freq() > b->freq(); };
//  priority_queue<NodePtr, vector<NodePtr>, decltype(cmp)> freqQueue(cmp);
//  // Create leaf nodes for each character frequency
//  for (const auto &tuple : charFreq)
//  {
//  freqQueue.push(make_shared<Leaf>(string(1, std::get<0>(tuple)),
// std::get<1>(tuple)));
//  }
//  // Build the priority queue tree
//  while (freqQueue.size() > 1)
//  {
//  NodePtr left = freqQueue.top();
//  freqQueue.pop();
//  NodePtr right = freqQueue.top();
//  freqQueue.pop();
//  freqQueue.push(make_shared<Branch>(left, right));
//  }
//  return freqQueue.top(); // Return the root of the priority queue tree
// }
// // bitTrail
// // Recursively traverse the tree and assign a bit string to each node
// void bitTrail(const NodePtr &root, string &bitString)
// {
//  // Check if the current node is a branch node
//  if (const auto branch = dynamic_pointer_cast<Branch>(root))
//  {
//  // Traverse the left and right child nodes of the branch
//  bitTrail(branch->left(), bitString += "0");
//  bitTrail(branch->right(), bitString += "1");
//  }
//  root->setBitTrail(bitString);
// }
// // Recursively print the priority queue tree
// void printQueueTree(const NodePtr &root, int depth = 0)
// {
//  // Check if the current node is a branch node
//  if (const auto branch = dynamic_pointer_cast<Branch>(root))
//  {
//  // Print spaces for indentation based on the depth of the node in the tree
//  for (int i = 0; i < depth; ++i)
//  {
//  cout << " ";
//  }
//  // Print the symbol and frequency of the branch node
//  cout << branch->symbol() << " (" << branch->freq() << ") - " << branch->bitString() << "\n";
//  // Recursively print the left and right child nodes of the branch
//  printQueueTree(branch->left(), depth + 2);
//  printQueueTree(branch->right(), depth + 2);
//  }
//  // Check if the current node is a leaf node
//  else if (const auto leaf = dynamic_pointer_cast<Leaf>(root))
//  {
//  // Print spaces for indentation based on the depth of the node in the tree
//  for (int i = 0; i < depth; ++i)
//  {
//  cout << " ";
//  }
//  // Print the symbol and frequency of the leaf node
//  cout << leaf->symbol() << " (" << leaf->freq() << ") - " << leaf->bitString() << "\n";
//  }
// }
// // Splits a string into a vector of strings, using the given delimiter.
// vector<string> split(const string &str, char delimiter)
// {
//  vector<string> parts;
//  stringstream ss(str);
//  string part;
//  while (getline(ss, part, delimiter))
//  {
//  parts.push_back(part);
//  }
//  return parts;
// }
// std::vector<std::tuple<char, int, string>> readCharacterFrequency(const std::string
// &filename)
// {
//  ifstream file(filename);
//  if (!file.is_open())
//  {
//  throw runtime_error("Could not open file: " + filename);
//  }
//  // Create a vector to store the sample data.
//  vector<tuple<char, int, string>> sample_data;
//  // Read each line of the file.
//  string line;
//  while (getline(file, line))
//  {
//  // replace the first Character[ with nothing
//  line.replace(0, 12, "");
//  // set char to the next character
//  char character = line[0];
//  // replace the first ] = Frequency[ with nothing
//  line.replace(0, 18, "");
//  // get the index of ' ]'
//  int index = line.find(']');
//  // get the substring from the beginning to the index
//  string frequencyString = line.substr(0, index);
//  // convert the string to an integer
//  int frequency = stoi(frequencyString);
//  // Add the (character, frequency) tuple to the vector.
//  sample_data.push_back(make_tuple(character, frequency, ""));
//  }
//  // Close the file.
//  file.close();
//  return sample_data;
// }
// int main()
// {
//  std::string filename = "plenty.txt"; // Replace with your filename
//  std::vector<std::tuple<char, int, string>> charFrequencyVector =
// readCharacterFrequency(filename);
//  // for (const auto &entry : charFrequencyVector)
//  // {
//  // char character = std::get<0>(entry);
//  // int frequency = std::get<1>(entry);
//  // std::cout << "Character[" << character << "] = Frequency[" << frequency<< "]\n";
//  // }
//  // string inputString = "MISSISSIPPI RIVER";
//  // // Calculate character frequencies from the input string
//  // map<char, float> charFreq;
//  // for (char c : inputString)
//  // {
//  // if (c != ' ')
//  // {
//  // charFreq[c]++;
//  // }
//  // else
//  // {
//  // // Include space character in the frequency map
//  // charFreq['^']++;
//  // }
//  // }
//  // Build the priority queue tree
//  NodePtr root = buildQueueTree(charFrequencyVector);
//  string bitString = "";
//  bitTrail(root, bitString);
//  // Print the priority queue tree
//  cout << "*****Queue Tree*****" << endl;
//  printQueueTree(root);
//  return 0;
// }